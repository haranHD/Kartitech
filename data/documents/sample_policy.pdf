The term "Spring" means different things in different contexts. It can be used to refer to the Spring
Framework project itself, which is where it all started. Over time, other Spring projects have been
built on top of the Spring Framework. Most often, when people say "Spring", they mean the entire
family of projects. This reference documentation focuses on the foundation: the Spring Framework
itself.
The Spring Framework is divided into modules. Applications can choose which modules they need.
At the heart are the modules of the core container, including a configuration model and a
dependency injection mechanism. Beyond that, the Spring Framework provides foundational
support for different application architectures, including messaging, transactional data and
persistence, and web. It also includes the Servlet-based Spring MVC web framework and, in
parallel, the Spring WebFlux reactive web framework.
A note about modules: Spring’s framework jars allow for deployment to JDK 9’s module path
("Jigsaw"). For use in Jigsaw-enabled applications, the Spring Framework 5 jars come with
"Automatic-Module-Name" manifest entries which define stable language-level module names
("spring.core", "spring.context", etc.) independent from jar artifact names (the jars follow the same
naming pattern with "-" instead of ".", e.g. "spring-core" and "spring-context"). Of course, Spring’s
framework jars keep working fine on the classpath on both JDK 8 and 9+.